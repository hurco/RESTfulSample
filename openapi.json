{
  "openapi": "3.0.0",
  "info": {
    "description": "RESTful api for third party integration with Hurco controls on port 4503 for HTTP and 4504 for HTTPS 4505 is used for callback channels. When opening callback channel STARTTLS will enable SSL, server will respond STARTTLS if accepted. If not using SSL then client should send HELLO instead, server will respond HELLO. Following this the client should send their token.",
    "version": "1.2.0",
    "title": "Swagger Hurco Dataservices",
    "contact": {
      "email": "support@hurco.com"
    }
  },
  "servers": [
    {
      "url": "https://machine-connect.hurco.com:4504/"
    },
    {
      "url": "https://127.0.0.1:4504/"
    },
    {
      "url": "http://machine-connect.hurco.com:4503/"
    },
    {
      "url": "http://127.0.0.1:4503/"
    }
  ],
  "tags": [
    {
      "name": "Connect",
      "description": "Connecting to the service and requesting an auth token"
    },
    {
      "name": "Doubles",
      "description": "Operations on Doubles"
    },
    {
      "name": "Strings",
      "description": "Operations on Strings"
    },
    {
      "name": "Bulks",
      "description": "Operations on Bulks"
    },
    {
      "name": "Integers",
      "description": "Operations on Integers"
    },
    {
      "name": "Subscriptions",
      "description": "Enable and Disable notifications"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "OpenApi"
        ],
        "summary": "gets the OpenAPI 3.0 specification of the API",
        "description": "will JSON document of OpenAPI 3.0 spec",
        "operationId": "getAPISpec",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonObject"
                }
              }
            }
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        }
      }
    },
    "/AuthService/Connect": {
      "post": {
        "tags": [
          "Connect"
        ],
        "summary": "request an authentication token used as APIkey for all other requests",
        "description": "",
        "operationId": "tokenrequest",
        "requestBody": {
          "description": "Username and Password to use",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCommandData"
              }
            }
          }
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful login token provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error processing request"
          }
        }
      }
    },
    "/AuthService/v1.2/Disconnect": {
      "get": {
        "tags": [
          "Connect"
        ],
        "summary": "request logout for a given authentication token, this will remove permissions for the token and log it out",
        "description": "",
        "operationId": "logoutrequest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful logout updated token permissions provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Server Error processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      }
    },
    "/DataService/Version": {
      "get": {
        "tags": [
          "versions"
        ],
        "summary": "gets the version of the API",
        "description": "will return API revision level",
        "operationId": "getDataserviceAPIversion",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoubleCommandData"
                }
              }
            }
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        }
      }
    },
    "/NotificationService/Version": {
      "get": {
        "tags": [
          "versions"
        ],
        "summary": "gets the version of the API",
        "description": "will return API revision level",
        "operationId": "getNotificationServiceAPIversion",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoubleCommandData"
                }
              }
            }
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        }
      }
    },
    "/DataService/String/{SID}": {
      "get": {
        "tags": [
          "Strings"
        ],
        "summary": "gets the string value of a given SID",
        "description": "will return string representations of doubles and ints if SID is of that type",
        "operationId": "getstringbySID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringCommandData"
                }
              }
            }
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Strings"
        ],
        "summary": "sets the string value of a given SID",
        "description": "sets the SID to the specified value",
        "operationId": "setstringbySID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "value to set string to",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StringCommandData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      }
    },
    "/DataService/v1.1/String/List": {
      "get": {
        "tags": [
          "Strings"
        ],
        "summary": "gets list of supported string SIDs",
        "description": "will return a Json object listing supported SIDs and if they are read only",
        "operationId": "getStringList",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SIDList"
                }
              }
            }
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        }
      }
    },
    "/DataService/v1.1/Double/List": {
      "get": {
        "tags": [
          "Doubles"
        ],
        "summary": "gets list of supported double SIDs",
        "description": "will return a Json object listing supported SIDs and if they are read only",
        "operationId": "getDoubleList",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SIDList"
                }
              }
            }
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        }
      }
    },
    "/DataService/v1.1/Integer/List": {
      "get": {
        "tags": [
          "Integers"
        ],
        "summary": "gets list of supported integer SIDs",
        "description": "will return a Json object listing supported SIDs and if they are read only",
        "operationId": "getIntList",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SIDList"
                }
              }
            }
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        }
      }
    },
    "/DataService/v1.1/Bulk/List": {
      "get": {
        "tags": [
          "Bulks"
        ],
        "summary": "gets list of supported bulk SIDs",
        "description": "will return a Json object listing supported SIDs and if they are read only",
        "operationId": "getBulkList",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SIDList"
                }
              }
            }
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        }
      }
    },
    "/DataService/Double/{SID}": {
      "get": {
        "tags": [
          "Doubles"
        ],
        "summary": "gets the double value of a given SID",
        "description": "will return ints as doubles if SID is int",
        "operationId": "getdoublebySID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoubleCommandData"
                }
              }
            }
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Doubles"
        ],
        "summary": "sets the double value of a given SID",
        "description": "sets the SID to the specified value",
        "operationId": "setdoublebySID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "value to set the double to",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoubleCommandData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      }
    },
    "/DataService/Bulk/{SID}": {
      "get": {
        "tags": [
          "Bulks"
        ],
        "summary": "gets the bulk value of a given SID",
        "description": "will return wrapped Bulk",
        "operationId": "getbulkbySID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkWrapper"
                }
              }
            }
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Bulks"
        ],
        "summary": "sets the bulk value of a given SID, needs to be of one of the supported bulk types",
        "description": "sets the SID to the specified value",
        "operationId": "setbulkbySID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "value to set the double to",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkWrapper"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      }
    },
    "/DataService/v1.1/Bulk/Schema/{SID}": {
      "get": {
        "tags": [
          "Bulks"
        ],
        "summary": "gets the bulk schema of a given SID",
        "description": "will return json schema for bulk",
        "operationId": "getbulkschemabySID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to get schema for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonObject"
                }
              }
            }
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      }
    },
    "/DataService/Integer/{SID}": {
      "get": {
        "tags": [
          "Integers"
        ],
        "summary": "gets the integer value of a given SID",
        "description": "will return doubles as ints if SID is int",
        "operationId": "getintbySID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegerCommandData"
                }
              }
            }
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Integers"
        ],
        "summary": "sets the integer value of a given SID",
        "description": "sets the SID to the specified value",
        "operationId": "setintbySID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "value to set the integer to",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegerCommandData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      }
    },
    "/NotificationService/Subscription/{SID}": {
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "unsubscribes client from given SID",
        "description": "disables notifications when this SID is updated, event forces non polled, and datastore forces shared memory checking only",
        "operationId": "unsubscribeSID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "subscribes client to given SID",
        "description": "enables notifications when this SID is updated, event forces non polled, and datastore forces shared memory checking only. Port 4505 is used for callback channels. When opening callback channel STARTTLS will enable SSL, server will respond STARTTLS if accepted. If not using SSL then client should send HELLO instead, server will respond HELLO. Following this the client should send their token.",
        "operationId": "subscribeSID",
        "parameters": [
          {
            "name": "SID",
            "in": "path",
            "description": "SID name to set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "description of the mode of subscription and method of notification when updates occur",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionCommandData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      }
    },
    "/NotificationService/Callback": {
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "removes a webhook callback for the client",
        "description": "the webhook will be used for any subscriptions set to mode: Webhook rather than mode: Callback.",
        "operationId": "removeCallback",
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "adds a webhook callback for the client",
        "description": "the webhook will be used for any subscriptions set to mode: Webhook rather than mode: Callback, this is an Endpoint that should expect Put requests with the payload being a NotificationData. Port 4505 is used for callback channels. When opening callback channel STARTTLS will enable SSL, server will respond STARTTLS if accepted. If not using SSL then client should send HELLO instead, server will respond HELLO. Following this the client should send their token.",
        "operationId": "addCallback",
        "requestBody": {
          "description": "description of the callback endpoint",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallbackCommandData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "no token provided or token invalid or token does not have permissions for this action"
          },
          "403": {
            "description": "action not supported for this endpoint"
          },
          "500": {
            "description": "Error Processing request"
          }
        },
        "security": [
          {
            "TokenAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "TokenAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "token"
      }
    },
    "schemas": {
      "JsonObject": {
        "type": "object"
      },
      "SIDDescription": {
        "type": "object",
        "properties": {
          "SID": {
            "type": "string"
          },
          "ReadOnly": {
            "type": "boolean"
          }
        }
      },
      "SIDList": {
        "type": "object",
        "properties": {
          "SupportedSids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SIDDescription"
            }
          }
        }
      },
      "LoginCommandData": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "tokenPriveleges": {
            "type": "integer",
            "description": "no permissions is 0, read 1, write 2, read|write 3",
            "enum": [
              0,
              1,
              2,
              3
            ]
          }
        }
      },
      "CallbackCommandData": {
        "type": "object",
        "properties": {
          "webHook": {
            "type": "string"
          },
          "useWebHook": {
            "type": "boolean"
          }
        }
      },
      "NotificationData": {
        "type": "object",
        "description": "used for subscription notifications",
        "properties": {
          "SID": {
            "description": "name of the SID that this notification is for",
            "type": "string"
          },
          "SIDvalue": {
            "description": "string representation of the new value, could be double int string or json string (bulk)",
            "type": "string"
          }
        }
      },
      "StringCommandData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          }
        }
      },
      "SubscriptionCommandData": {
        "type": "object",
        "properties": {
          "useEvent": {
            "type": "boolean"
          },
          "useDatastore": {
            "type": "boolean"
          },
          "mode": {
            "type": "integer",
            "description": "0 = Webhook, 1 = Callback",
            "enum": [
              0,
              1
            ]
          }
        }
      },
      "DoubleCommandData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "number",
            "format": "Float64"
          }
        }
      },
      "IntegerCommandData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "integer",
            "format": "Int32"
          }
        }
      },
      "BulkWrapper": {
        "type": "object",
        "properties": {
          "bulk": {
            "type": "object",
            "$ref": "#/components/schemas/Bulk"
          }
        }
      },
      "Bulk": {
        "type": "object",
        "discriminator": {
          "propertyName": "__type"
        },
        "properties": {
          "__type": {
            "type": "string",
            "description": "name of the type"
          },
          "BulkStruct": {
            "type": "object"
          }
        },
        "required": [
          "__type"
        ]
      },
      "BulkNotificationDataTypeBox:WcfDataServices": {
        "description": "Notification posted to screen",
        "allOf": [
          {
            "$ref": "#/components/schemas/Bulk"
          },
          {
            "type": "object",
            "properties": {
              "BulkStruct": {
                "type": "object",
                "$ref": "#/components/schemas/BulkNotificationDataType"
              }
            }
          }
        ]
      },
      "RemoteCommandInfoTypeBox:WcfDataServices": {
        "description": "Notification posted to screen",
        "allOf": [
          {
            "$ref": "#/components/schemas/Bulk"
          },
          {
            "type": "object",
            "properties": {
              "BulkStruct": {
                "type": "object",
                "$ref": "#/components/schemas/RemoteCommandInfoType"
              }
            }
          }
        ]
      },
      "BulkPartSetupTypeBox:WcfDataServices": {
        "description": "Notification posted to screen",
        "allOf": [
          {
            "$ref": "#/components/schemas/Bulk"
          },
          {
            "type": "object",
            "properties": {
              "BulkStruct": {
                "type": "object",
                "$ref": "#/components/schemas/BulkCurrentPartSetupType"
              }
            }
          }
        ]
      },
      "BulkShutdownWinmaxTypeBox:WcfDataServices": {
        "description": "Notification posted to screen",
        "allOf": [
          {
            "$ref": "#/components/schemas/Bulk"
          },
          {
            "type": "object",
            "properties": {
              "BulkStruct": {
                "type": "object",
                "$ref": "#/components/schemas/BulkShutdownSystemType"
              }
            }
          }
        ]
      },
      "BulkMachinePosTypeBox:WcfDataServices": {
        "description": "Notification posted to screen",
        "allOf": [
          {
            "$ref": "#/components/schemas/Bulk"
          },
          {
            "type": "object",
            "properties": {
              "BulkStruct": {
                "type": "object",
                "$ref": "#/components/schemas/BulkMachinePosType"
              }
            }
          }
        ]
      },
      "BulkMillNCVariableBox:WcfDataServices": {
        "description": "Notification posted to screen",
        "allOf": [
          {
            "$ref": "#/components/schemas/Bulk"
          },
          {
            "type": "object",
            "properties": {
              "BulkStruct": {
                "type": "object",
                "$ref": "#/components/schemas/BulkMillNCVariable"
              }
            }
          }
        ]
      },
      "BulkLoadedProgramsBox:WcfDataServices": {
        "description": "Notification posted to screen",
        "allOf": [
          {
            "$ref": "#/components/schemas/Bulk"
          },
          {
            "type": "object",
            "properties": {
              "BulkStruct": {
                "type": "object",
                "$ref": "#/components/schemas/BulkLoadedPrograms"
              }
            }
          }
        ]
      },
      "BulkNotificationDataType": {
        "type": "object",
        "properties": {
          "m_wrcFileName": {
            "type": "array",
            "description": "ANSI encoded string as bytes",
            "minItems": 400,
            "maxItems": 400,
            "items": {
              "type": "integer",
              "format": "Int8"
            }
          },
          "m_NotificationIndex": {
            "type": "integer"
          },
          "m_Msg": {
            "type": "array",
            "description": "UTF_16 encoded string as bytes",
            "minItems": 400,
            "maxItems": 400,
            "items": {
              "type": "integer",
              "format": "Int8"
            }
          },
          "m_MsgType": {
            "type": "integer",
            "format": "Int32"
          },
          "m_Timestamp": {
            "type": "object",
            "$ref": "#/components/schemas/timestamp"
          }
        }
      },
      "RemoteCommandInfoType": {
        "type": "object",
        "properties": {
          "dwCmdId": {
            "type": "integer",
            "format": "Int32"
          },
          "dValue": {
            "type": "array",
            "minItems": 10,
            "maxItems": 10,
            "items": {
              "format": "Float64",
              "type": "number"
            }
          },
          "sValue": {
            "description": "5x 200 byte ANSI strings",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "Int8"
            },
            "minItems": 1000,
            "maxItems": 1000
          },
          "dwCmdCompleteSid": {
            "type": "integer"
          }
        },
        "required": [
          "dwCmdId"
        ]
      },
      "BulkShutdownSystemType": {
        "type": "object",
        "properties": {
          "bRestart": {
            "type": "boolean"
          },
          "bUserConfirm": {
            "type": "boolean"
          }
        },
        "required": [
          "bRestart",
          "bUserConfirm"
        ]
      },
      "BulkCurrentPartSetupType": {
        "type": "object",
        "properties": {
          "offsets": {
            "type": "object",
            "$ref": "#/components/schemas/BulkMachinePosType"
          },
          "A_Centerline": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "format": "Float64",
              "type": "number"
            }
          },
          "B_Centerline": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "format": "Float64",
              "type": "number"
            }
          },
          "C_Centerline": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": {
              "format": "Float64",
              "type": "number"
            }
          },
          "XYSkewAngle": {
            "type": "number",
            "format": "Float64"
          }
        }
      },
      "BulkMachinePosType": {
        "type": "object",
        "properties": {
          "dMachinePosition": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "Float64"
            },
            "minItems": 16,
            "maxItems": 32
          }
        }
      },
      "BulkMillNCVariable": {
        "type": "object",
        "properties": {
          "arrayLength": {
            "type": "integer",
            "format": "Int32"
          },
          "operandData": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "Float64"
            },
            "minItems": 500,
            "maxItems": 500
          },
          "operandType": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "Int32,",
              "description": "0 = valid, 1 = invalid, 2 = vacant, 3 = null",
              "enum": [
                0,
                1,
                2,
                3
              ]
            },
            "minItems": 500,
            "maxItems": 500
          },
          "CopyVariables": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "Int32"
            },
            "minItems": 500,
            "maxItems": 500
          }
        }
      },
      "BulkLoadedPrograms": {
        "type": "object",
        "properties": {
          "fileNames": {
            "type": "array",
            "description": "ANSI encoded string as bytes",
            "minItems": 3200,
            "maxItems": 3200,
            "items": {
              "type": "integer",
              "format": "Int8"
            }
          },
          "numLoadedFiles": {
            "type": "integer",
            "format": "Int32"
          },
          "maxFiles": {
            "type": "integer",
            "format": "Int32"
          },
          "strMaxSize": {
            "type": "integer",
            "format": "Int32"
          }
        }
      },
      "timestamp": {
        "type": "object",
        "properties": {
          "wDay": {
            "type": "integer",
            "format": "Int32"
          },
          "wDayOfWeek": {
            "type": "integer",
            "format": "Int32"
          },
          "wHour": {
            "type": "integer",
            "format": "Int32"
          },
          "wMilliseconds": {
            "type": "integer",
            "format": "Int32"
          },
          "wMinute": {
            "type": "integer",
            "format": "Int32"
          },
          "wMonth": {
            "type": "integer",
            "format": "Int32"
          },
          "wSecond": {
            "type": "integer",
            "format": "Int32"
          },
          "wYear": {
            "type": "integer",
            "format": "Int32"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
